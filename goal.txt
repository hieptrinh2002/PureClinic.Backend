- Hệ thống quản lý phòng khám 

* Phân hệ: 
  - System:
	+ Realtime: danh sách chờ bệnh nhân, push notification khi có lịch hẹn, ...
	+ chatbox: Quản lý, tư vấn bệnh nhân, lịch khám bệnh qua chat box.
	+ cron job: Tự động lập lịch hệ thống gửi reminder cho bệnh nhân trước 1 ngày khám bệnh (mailtrap)
	+ logger
	+ elastic search + logs (khó quá thì chuyển qua search full text? :)))
	+ authentication && authorization
	+ Cloudinary or Azure Blob Storage (saving imgs)
	+ Caching with redis && MemoryCache (performance optimization)
	+ Clean architecture
	+ Dynamic layout if possible.
	+ review, stars từ khách hàng 
	+ Rabbit MQ (phức tạp?)
	+ SqlServer + MongoDB + Redis
	+ Unit test
	+ Mongodb config

- Dữ liệu phi cấu trúc hoặc dữ liệu cần mở rộng linh hoạt: 
Như hình ảnh X-quang, kết quả xét nghiệm, hoặc các thông tin khám bệnh không tuân theo một cấu trúc cố định.
Lưu trữ khối lượng lớn dữ liệu mà không cần quan tâm đến việc thay đổi cấu trúc bảng
Ví dụ, hình ảnh X-quang có thể có nhiều độ phân giải hoặc các kết quả xét nghiệm có thể thay đổi theo từng lần khám.

- Dữ liệu có cấu trúc cố định và cần tính toàn vẹn cao: 
Thông tin bệnh nhân như tên, địa chỉ, số điện thoại, các thông tin liên quan đến lịch sử bệnh án có thể lưu trữ tốt trong SQL Server.
Các mối quan hệ phức tạp hoặc dữ liệu cần tham chiếu chặt chẽ: Các bảng liên quan đến bệnh nhân, bác sĩ, lịch hẹn có thể được quản lý tốt hơn trong SQL Server.

(kiểu với các loại bệnh sẽ có những trường riêng, những loại thuốc riêng => linh hoạt)

  - Employee:
	+ Tiếp nhận yêu cầu khám bệnh và lên lịch khám
	+ Quản lý/ xem được trạng thái của bác sĩ 
	+ Quản lý trạng thái lịch hẹn: chờ xác nhận, đã hoàn tất.
	+ CRUD ....
	+ Quản lí bệnh nhân và feedback
	+ Quản lí, lênh lịch ( cuộc hẹn với bác sĩ ), tái khám nếu có cho bệnh nhân.
	+ Request đặt lịch khám bệnh với bác sĩ mong muốn? hệ thống báo nếu bác sĩ đã có cuộc hẹn vào lúc đó và đề nghị chọn đặt lịch giờ khác

  - Doctor: 
    + Quản lý bệnh án/ bệnh nhân đã khám 
	+ Quản lý bệnh nhân được chính bác sĩ đó theo dõi, lênh lộ trình, giai đoạn...., quản lý được thông tin chi tiết 
	+ Xem lịch sử khám bệnh của các bệnh nhân đã khám
	+ Xem các đơn thuốc đã kê khai
	+ Tiếp nhận cuộc hẹn khám bệnh

  - Customer
    + Hệ thống tạo tài khoản mặc định cho người dùng  
    + Xem danh sách dịch vụ phòng khám
	+ Xem danh sách bác sĩ, thông tin chi tiết...



***** Viewer design
- Từ danh sách patient => chọn tạo lịch hẹn, chọn xem thông tin cá nhân, update status, quản lí hồ sơ patient
***** API Design 
** Profile
- Lấy thông tin 1 bác sĩ
  ✅ + (tt chung, kinh nghiệm, chuyên ngành .....) => profile
  ✅ + Đăng kí lịch làm việc cho bác sĩ
  ✅ + Lấy lịch làm việc của một bác sĩ (optinal)
   + Lấy tất cả thông tin cuộc hẹn khám bệnh của 1 bác sĩ  (lấy tất cả cuộc hẹn vào ngày hôm nay, tuần này, tháng này) + các filter khác (optinal)
   + Lấy danh sách bệnh nhân đang được chính mình điều trị chính
- Lấy thông tin 1 bệnh nhân:
   + Lấy thông tin chung của 1 bệnh nhân
   + Lấy tất cả lịch sử khám bệnh của 1 bệnh nhân ( bao gồm hồ sơ bệnh, kết quả các lần trc, lời khuyên bs, )
   + Lấy được tất cả các bệnh án, các file bệnh án, ảnh của 1 bệnh nhân trong các lần khám
   + 
 ** 
- Thêm các cuộc hẹn khám bệnh giữa khách hàng và bác sĩ  (bac sĩ, khách hàng, thời gian , trạng thái, loại cuộc hẹn (tái khám, tổng quát, chung chung ...))
- 
*****
plan: 
- 23/12/2024 - 19/12/2024: 
	✅+ init project structure base 
	✅+ authentication (jwt/ refresh Token)
- 30/12/2024 - 05/01/2025: 
	✅+ CRUD profile API (user) 
	✅+ Send mail services
	✅+ Register accout => confirm mails when register account
	✅+ Lock account when login failed more than 5 times
	✅+ Append refresh token to client cookie
- 6/01/2025 - 12/01/2025: 
	✅- Using Bogus to seed data for system
	- FE (reactjs)
		✅+ Login / logout 
		✅+ Zustand for state management
		+ show list doctor
		+ show list partient
	- BE: 
		+ CRUD Appointment api 
		+ Update status appointment
		✅+ CRUD Doctor
		✅+ CRUD Partient
		+ Save uploaded file using Azure Blob Storage
		✅+ Api for work schedule, register schedule, get schedule of user 
		✅ + (tt chung, kinh nghiệm, chuyên ngành .....) => profile
		✅ + API Đăng kí lịch làm việc cho bác sĩ
		✅ + API Lấy lịch làm việc của một bác sĩ (optinal)






























***** NOTE
1. Quản lý lịch hẹn (Appointment Scheduling)
Mô tả: Xây dựng tính năng quản lý lịch hẹn cho bệnh nhân và bác sĩ. Hệ thống sẽ giúp bệnh nhân đặt lịch và bác sĩ xem lịch làm việc của họ.
Tính năng chính:
Chọn thời gian và bác sĩ.
Tính năng nhắc nhở qua email/SMS.
Xem lịch hẹn trong ngày, tuần, tháng.
Chức năng hủy hoặc thay đổi lịch hẹn.
Công nghệ có thể dùng: FullCalendar (ReactJS), Date-fns, hoặc moment.js để xử lý thời gian.
2. Quản lý bệnh án (Medical Records)
Mô tả: Tạo một hệ thống để lưu trữ và truy cập bệnh án của bệnh nhân. Mỗi bệnh nhân có thể có một hồ sơ y tế bao gồm các thông tin về bệnh sử, xét nghiệm, chẩn đoán, và phương pháp điều trị.
Tính năng chính:
Lưu trữ thông tin bệnh nhân, bao gồm lịch sử bệnh án.
Cho phép bác sĩ và bệnh nhân truy cập, cập nhật hồ sơ.
Lưu trữ các kết quả xét nghiệm, toa thuốc.
Công nghệ có thể dùng: MongoDB cho cơ sở dữ liệu phi quan hệ, hoặc sử dụng PostgreSQL/Mysql nếu bạn muốn cơ sở dữ liệu quan hệ.
3. Tính năng quản lý thuốc (Pharmacy Management)
Mô tả: Xây dựng tính năng quản lý kho thuốc và các đơn thuốc.
Tính năng chính:
Lưu trữ thông tin thuốc (tên, liều lượng, hạn sử dụng).
Quản lý đơn thuốc cho bệnh nhân.
Kiểm tra số lượng thuốc trong kho và thông báo khi cần bổ sung.
Công nghệ có thể dùng: ReactJS cho giao diện người dùng, sử dụng Redux hoặc Zustand cho quản lý trạng thái.
4. Quản lý thanh toán (Billing and Payments)
Mô tả: Tạo hệ thống thanh toán cho bệnh nhân, bao gồm các phương thức thanh toán như tiền mặt, chuyển khoản, và thanh toán qua thẻ.
Tính năng chính:
Tính toán các khoản chi phí khám chữa bệnh.
Gửi hóa đơn điện tử cho bệnh nhân.
Lịch sử thanh toán của bệnh nhân.
Công nghệ có thể dùng: Stripe, PayPal API cho thanh toán trực tuyến.
5. Chức năng nhắc nhở và thông báo (Notifications & Alerts)
Mô tả: Tạo hệ thống thông báo để nhắc nhở bệnh nhân về lịch hẹn, các cuộc hẹn sắp tới, hoặc các thông tin cần thiết.
Tính năng chính:
Gửi email/SMS nhắc lịch hẹn, xét nghiệm.
Thông báo về các sự kiện quan trọng.
Công nghệ có thể dùng: NodeMailer, Twilio API để gửi SMS/email, hoặc Firebase Cloud Messaging.
6. Quản lý người dùng và phân quyền (User Management & Roles)
Mô tả: Tạo hệ thống phân quyền người dùng với các vai trò khác nhau (admin, bác sĩ, nhân viên, bệnh nhân).
Tính năng chính:
Phân quyền cho các đối tượng người dùng khác nhau.
Tạo hệ thống đăng ký và đăng nhập.
Quản lý mật khẩu và các phương thức bảo mật (ví dụ: xác thực 2 yếu tố).
Công nghệ có thể dùng: JWT (JSON Web Token) cho xác thực, bcrypt cho mã hóa mật khẩu.
7. Tính năng báo cáo và thống kê (Reports & Analytics)
Mô tả: Tạo các báo cáo thống kê cho quản lý phòng khám về số lượng bệnh nhân, số lượng khám bệnh, số lượng thuốc đã sử dụng, v.v.
Tính năng chính:
Thống kê số lượng bệnh nhân theo tháng/quý.
Báo cáo các khoản thanh toán, khám chữa bệnh.
Đồ họa thống kê về số lượng thuốc đã sử dụng, v.v.
Công nghệ có thể dùng: Chart.js, Recharts hoặc Chartkick (Ruby on Rails).
8. Tính năng video call cho tư vấn từ xa (Telemedicine)
Mô tả: Cung cấp tính năng video call cho bác sĩ và bệnh nhân để tư vấn từ xa.
Tính năng chính:
Tạo phòng video call.
Hỗ trợ chia sẻ màn hình, gửi tài liệu.
Tính năng ghi âm cuộc gọi.
Công nghệ có thể dùng: WebRTC, Twilio, Daily.co.
9. Quản lý lịch làm việc của bác sĩ (Doctor's Schedule)
Mô tả: Xây dựng một hệ thống để bác sĩ có thể tạo và quản lý lịch làm việc của mình.
Tính năng chính:
Đặt giờ làm việc cho bác sĩ.
Hiển thị lịch làm việc trong ngày, tuần.
Thêm hoặc sửa đổi các cuộc hẹn vào lịch.
Công nghệ có thể dùng: FullCalendar, React DatePicker.
10. Quản lý phản hồi và đánh giá (Feedback & Reviews)
Mô tả: Cho phép bệnh nhân đánh giá bác sĩ hoặc dịch vụ.
Tính năng chính:
Bệnh nhân có thể đánh giá bác sĩ theo các tiêu chí như chất lượng, thái độ phục vụ.
Hiển thị các đánh giá trên trang của bác sĩ hoặc dịch vụ.
Công nghệ có thể dùng: React Star Rating, tích hợp hệ thống đánh giá và lưu trữ vào cơ sở dữ liệu.

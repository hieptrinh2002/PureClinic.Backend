- Hệ thống quản lý phòng khám 

* Phân hệ: 
  - System && technical:
	+ Realtime: danh sách chờ bệnh nhân, push notification khi có lịch hẹn, ...
	+ chatbox: Quản lý, tư vấn bệnh nhân, lịch khám bệnh qua chat box.
	+ cron job: Tự động lập lịch hệ thống gửi reminder cho bệnh nhân trước 1 ngày khám bệnh (mailtrap)
	+ logger
	+ elastic search + logs (khó quá thì chuyển qua search full text? / Serilog)
	+ authentication && authorization
	+ Cloudinary or Azure Blob Storage (saving imgs)
	+ Caching with redis && MemoryCache (performance optimization)
	+ Clean architecture
	+ review, stars từ khách hàng 
	+ Rabbit MQ (phức tạp?)
	+ SqlServer + MongoDB + Redis
	+ Unit test
	+ Mongodb config

* Nghiệp vụ

  - System: 
	+ Hệ thống cảnh báo nếu bác sĩ kê hai loại thuốc có tương tác nguy hiểm
	+ Lịch sử dùng thuốc cần được lưu lại để tránh kê đơn trùng lặp hoặc lạm dụng thuốc.
	+ Nhắc lịch khám qua email, SMS, hoặc notification để giảm tỷ lệ bệnh nhân quên lịch. Nếu bệnh nhân không đến đúng giờ, có thể gửi nhắc nhở hoặc hủy sau X phút.
	+ Lock thời gian giữ đặt chỗ với 1 bác sĩ?
	+ Nếu bác sĩ xin nghỉ, hệ thống cần tự động chuyển lịch cho bác sĩ khác hoặc thông báo bệnh nhân.
	+ Không cho phép đặt lịch vào ngày bác sĩ đã đăng ký nghỉ phép.
	+ Thông báo cho bác sĩ nếu chưa đăng kí lịch làm việc vào tuần tiếp theo

  - Employee:
	+ Tiếp nhận yêu cầu khám bệnh và lên lịch khám
	+ Quản lý/ xem được trạng thái của bác sĩ 
	+ Quản lý trạng thái lịch hẹn: chờ xác nhận, đã hoàn tất.
	+ CRUD ....
	+ Quản lí bệnh nhân và feedback
	+ Quản lí, lênh lịch ( cuộc hẹn với bác sĩ ), tái khám nếu có cho bệnh nhân.
	+ Request đặt lịch khám bệnh với bác sĩ mong muốn? hệ thống báo nếu bác sĩ đã có cuộc hẹn vào lúc đó và đề nghị chọn đặt lịch giờ khác

  - Doctor: 
    + Quản lý bệnh án/ bệnh nhân đã khám 
	+ Quản lý bệnh nhân được chính bác sĩ đó theo dõi, lênh lộ trình, giai đoạn...., quản lý được thông tin chi tiết 
	+ Xem lịch sử khám bệnh của các bệnh nhân đã khám
	+ Xem các đơn thuốc đã kê khai
	+ Tiếp nhận cuộc hẹn khám bệnh
	+ Bác sỹ làm một ngày không quá 8 tiếng, mỗi ngày nhận tối đa 15 ca khám chữa bệnh
	+ Tính số ca khám tối đa dựa trên số giờ và khung giờ làm việc của bác sĩ
	+ Mỗi bác sĩ làm tối đa X lượt khám/ngày và chỉ làm trong khung giờ nhất định theo lịch đã đăng kí
	+ Nếu lịch khám đầy, bệnh nhân cần được đề xuất lịch khám vào ngày khác hoặc bác sĩ khác
	+ Ưu tiên khám cho nhóm đặc biệt (người già, phụ nữ mang thai, trẻ nhỏ, người khuyết tật).
	+ Tự động xếp lịch dựa trên thời gian trống của bác sĩ, tránh trùng lặp lịch khám.
	+ Khi 2 bệnh nhân đặt lịch cùng lúc, hệ thống cần lock hoặc xử lý hàng đợi (queue) để đảm bảo không có 2 lịch khám trùng nhau.
	(Sử dụng transaction trong database hoặc optimistic concurrency control để tránh lỗi double booking.)
	+ Kiểm tra xem bệnh nhân có tiền sử dị ứng thuốc không trước khi kê đơn.

  - Customer
    + Hệ thống tạo tài khoản mặc định cho người dùng  
    + Xem danh sách dịch vụ phòng khám
	+ Xem danh sách bác sĩ, thông tin chi tiết...

***** Viewer design
- Từ danh sách patient => chọn tạo lịch hẹn, chọn xem thông tin cá nhân, update status, quản lí hồ sơ patient
***** API Design 
** Profile
- Lấy thông tin 1 bác sĩ
  ✅ + (tt chung, kinh nghiệm, chuyên ngành .....) => profile
  ✅ + Đăng kí lịch làm việc cho bác sĩ
  ✅ + Lấy lịch làm việc của một bác sĩ (optinal)
   + Lấy tất cả thông tin cuộc hẹn khám bệnh của 1 bác sĩ  (lấy tất cả cuộc hẹn vào ngày hôm nay, tuần này, tháng này) + các filter khác (optinal)
   + Lấy danh sách bệnh nhân đang được chính mình điều trị chính
- Lấy thông tin 1 bệnh nhân:
   + Lấy thông tin chung của 1 bệnh nhân
   + Lấy tất cả lịch sử khám bệnh của 1 bệnh nhân ( bao gồm hồ sơ bệnh, kết quả các lần trc, lời khuyên bs, )
   + Lấy được tất cả các bệnh án, các file bệnh án, ảnh của 1 bệnh nhân trong các lần khám
   + 
 ** 
- Thêm các cuộc hẹn khám bệnh giữa khách hàng và bác sĩ  (bac sĩ, khách hàng, thời gian , trạng thái, loại cuộc hẹn (tái khám, tổng quát, chung chung ...))
- Phân loại thêm cấp độ bệnh nhân => có lộ trình điều trị (cân nhắc mongodb)

*****
plan: 
- 23/12/2024 - 19/12/2024: 
	✅+ init project structure base 
	✅+ authentication (jwt/ refresh Token)
- 30/12/2024 - 05/01/2025: 
	✅+ CRUD profile API (user) 
	✅+ Send mail services
	✅+ Register accout => confirm mails when register account
	✅+ Lock account when login failed more than 5 times
	✅+ Append refresh token to client cookie
- 6/01/2025 - 12/01/2025: 
	✅- Using Bogus to seed data for system
	- FE (reactjs)
		✅+ Login / logout 
		✅+ Zustand for state management
		✅+ show list doctor
		✅+ show list partient
	- BE: 
		✅+ CRUD Appointment api (thêm, update status, )
		✅+ Update status appointment
		✅+ CRUD Doctor
		✅+ CRUD Partient
		+ Save uploaded file using Azure Blob Storage
		✅ + Api for work schedule, register schedule, get schedule of user 
		✅ + (tt chung, kinh nghiệm, chuyên ngành .....) => profile
		✅ + API Đăng kí lịch làm việc cho bác sĩ
		✅ + API Lấy lịch làm việc của một bác sĩ (optinal)
		✅ + API Tạo mới và	
		✅ + Lấy tất cả cuộc hẹn của 1 bác sỹ/ 1 patient order by appointmentDate, by status

- 13/01/2025 - 19/01/2025:
     - BE:
		✅ + Redis / memory cahing
		✅ (in progress) + MedicalReport api ( create, get , get by patient (sort by date, status..), update, delete 
		✅ + Update, add new PrescriptionDetail 
		✅ + Prescription-details( update, add new , delete,)
		✅ + Appointment (get by status, top 10 apointment pending status and sort by created time, lấy trong range time nào đó)
		✅ + MedicalFile(( update, add new , delete, ) của 1 bệnh nhân
		✅ + Filter api
		+ Notification (using RabbitMQ as a service bus, and SignalR to stream messages to a React.js front-end)
		+ Setup RabbitMq

3. SignalR
Mục đích: Thực hiện giao tiếp thời gian thực giữa máy chủ và ứng dụng client (ví dụ như thông báo khi có lịch hẹn, thay đổi trạng thái bệnh nhân, v.v.).
5. IdentityServer4 hoặc ASP.NET Core Identity
Mục đích: Cung cấp hệ thống xác thực và phân quyền người dùng.
7. Hangfire
Mục đích: Quản lý và thực hiện các công việc nền (background tasks) như gửi email thông báo, tạo báo cáo hoặc nhắc nhở lịch khám cho bệnh nhân.
Lợi ích: Cho phép thực hiện các tác vụ định kỳ hoặc theo thời gian mà không cần phải chờ đợi trong quá trình người dùng tương tác với hệ thống.
8. SQL Server (Full-Text Search)
Mục đích: Tìm kiếm nhanh chóng và chính xác trong cơ sở dữ liệu, đặc biệt là khi cần tìm kiếm bệnh nhân, hồ sơ bệnh lý, thuốc, hoặc lịch sử khám.
Lợi ích: Giúp cải thiện hiệu suất tìm kiếm và hỗ trợ tìm kiếm từ đồng nghĩa, đặc biệt là khi có nhiều dữ liệu văn bản trong hệ thống.
9. RabbitMQ hoặc Azure Service Bus (Message Queues)
Mục đích: Xử lý và gửi thông điệp giữa các phần của hệ thống hoặc giữa các hệ thống khác nhau (ví dụ, gửi thông báo hoặc email tự động sau khi bác sĩ xác nhận lịch khám).
Lợi ích: Giúp quản lý các tác vụ đồng bộ, tăng tính khả dụng và khả năng mở rộng của hệ thống.
10. Caching (Redis hoặc MemoryCache)
Mục đích: Tăng tốc độ truy cập dữ liệu trong ứng dụng như danh sách bệnh nhân, lịch khám, v.v.
11. Document Storage (Cloundinary)
Mục đích: Lưu trữ tài liệu y tế như hồ sơ bệnh nhân, kết quả xét nghiệm, hình ảnh X-quang, v.v.
12. QR Code/Barcode Scanning
Mục đích: Tạo mã QR hoặc mã vạch cho bệnh nhân hoặc hồ sơ bệnh nhân để quét khi bệnh nhân đến khám.
Lợi ích: Giảm thiểu sai sót và tăng tốc quá trình đăng ký khám bệnh, giúp việc truy xuất dữ liệu bệnh nhân nhanh chóng.
13. Excel/PDF Reporting
Mục đích: Xuất báo cáo thống kê, báo cáo hóa đơn, báo cáo khám bệnh dưới dạng Excel hoặc PDF.
14 Unit test

case gửi 1 lúc quá nhiều mail -> đẩy vào queue????